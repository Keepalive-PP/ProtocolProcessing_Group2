Simulation UI is based on Python 2.7 and PyGame-library, that handles the graphics. PyGame is extended with our UI-library, that is derived from another project, called Xadir, that needed simple UI-components such as buttons and panels. The UI-library was also co-authored by Heikki Juva, and expanded during this project with needed classes. Simulation UI uses also SelectDialog-class by Aleksi Torhamo, also originally created for Xadir-project. The EzText-library by Anonymous author is found in http://www.pygame.org/project-EzText-920-.html. This library is used for text-input, and extended for better support of selection one textfield and input-characters.

The Simulation UI-library defines two types of classes, UI- and Data-classes. UI-class defines strictly UI-related class, for example the RouterModel-class that is used to represent selected router and displays information about the given router. Data-classes are defined in Simulation UI to represent the objects in SystemC-simulation. This makes it simple to create simulation objects, such as Routers, Interfaces and so on in Simulation UI before the SystemC-simulation is started. After the SystemC simulation is started, Simulation UI objects are periodically synced using the socket-connection. Good example of this is the routing tables, that are read from router in SystemC simulation and given for corresponding Simulation UI router. Then the selectdialogs in Simulation UI read the tables from objects defined in Python.

Because the simulation has to be widely configurable and at the same time user need information about all of the aspects of simulation, such as routers, packets, network and routing tables, we decided to use console-type input system to setup the simulation and control simulation when running. Most of the advanced configs about routers and connections are available from console, such as setting router prefix. More simple things, such as creating routers and connecting routers together can be done with mouse. You can check available console commands by typing command "help" inside console.

When user has defined the desired simulation options, simulation can be started by clicking "Start". This sends the configuration to SystemC-simulation by socket-connection and starts updating the routing tables. Now user can send packets between routers, disable connections from console and follow the structure of routing tables when modifying the network topology.
